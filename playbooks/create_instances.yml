---
- name: Create resources and EC2 instances
  hosts: localhost
  gather_facts: false
  collections:
    - amazon.aws
  vars:
    ansible_python_interpreter: /opt/homebrew/opt/python@3.12/bin/python3.12  # Adjust if necessary
  tasks:
    - name: create key pair using key_material obtained using 'file' lookup plugin
      amazon.aws.ec2_key:
        name: my_keypair
        key_material: "{{ lookup('file', '/Users/leeladharedala/Ansiblescript/key3.pub') }}"

    - name: Create security group
      amazon.aws.ec2_security_group:
        name: "test-security-group"
        description: "Sec group for app"
        region: "us-east-1"
        rules:                                # allows ssh on port 22
          - proto: tcp
            ports:
              - 22
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all on ssh port

    - name: Launch EC2 instances
      amazon.aws.ec2_instance:
        key_name: "my_keypair"  # Use the generated key pair
        instance_type: t2.medium
        image_id: ami-0ae8f15ae66fe8cda            # Replace with your preferred AMI ID
        region: us-east-1  
        security_group: "test-security-group"                        # AWS region
        wait: yes                                  # Number of instances
        tags:
          Name: rke2-node7
        network:
          assign_public_ip: true
      register: primary_ec2
    
    - name: Wait for 1 minutes to let instances initialize
      pause:
        minutes: 1 
    
    - name: Add the primary RKE2 server to the inventory
      add_host:
        groups: rke2_primary_server
        hostname: "{{ primary_ec2.instances[0].public_ip_address }}"
        ansible_user: ec2-user
        ansible_ssh_private_key_file: "/Users/leeladharedala/rke2-ha/keys/key3.pem"
        vpc_id: "{{ primary_ec2.instances[0].vpc_id }}"
    
    - name: Launch EC2 instances
      amazon.aws.ec2_instance:
        key_name: "my_keypair"  # Use the generated key pair
        instance_type: t2.medium
        image_id: ami-0ae8f15ae66fe8cda            # Replace with your preferred AMI ID
        region: us-east-1  
        security_group: "test-security-group"                        # AWS region
        wait: yes  
        count: 2                                # Number of instances
        tags:
          Name: rke2-node7
        network:
          assign_public_ip: true
      register: secondary_ec2
      
    - name: Wait for 2 minutes to let instances initialize
      pause:
        minutes: 2 

    - name: Add the secondary RKE2 server to the inventory
      add_host:
        groups: rke2_secondary_servers
        hostname: "{{ secondary_ec2.instances[1].public_ip_address }}"
        ansible_user: ec2-user
        ansible_ssh_private_key_file: "/Users/leeladharedala/rke2-ha/keys/key3.pem"
        vpc_id: "{{ secondary_ec2.instances[1].vpc_id }}"

    - name: Add the secondary RKE2 server to the inventory
      add_host:
        groups: rke2_secondary_servers
        hostname: "{{ secondary_ec2.instances[2].public_ip_address }}"
        ansible_user: ec2-user
        ansible_ssh_private_key_file: "/Users/leeladharedala/rke2-ha/keys/key3.pem"
        vpc_id: "{{ secondary_ec2.instances[2].vpc_id }}"

- name: Configure EC2 instances for passwordless sudo
  hosts: rke2_primary_server
  gather_facts: false
  become: yes
  vars:
     ansible_python_interpreter: /usr/bin/python3
  tasks:
    - name: Allow passwordless sudo for ec2-user
      lineinfile:
        dest: /etc/sudoers
        regexp: '^ec2-user ALL=.*'
        line: 'ec2-user ALL=(ALL) NOPASSWD:ALL'
        state: present
        validate: 'visudo -cf %s'

  
- name: Configure the secondary RKE2 servers for passwordless sudo
  hosts: rke2_secondary_servers
  gather_facts: false
  become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3
  tasks:
    - name: Allow passwordless sudo for ec2-user
      lineinfile:
        dest: /etc/sudoers
        regexp: '^ec2-user ALL=.*'
        line: 'ec2-user ALL=(ALL) NOPASSWD:ALL'
        state: present
        validate: 'visudo -cf %s'  

- name: Create Load Balancers and Target Groups
  hosts: localhost
  gather_facts: no
  collections:
    - amazon.aws
  vars:
    ansible_python_interpreter: /opt/homebrew/opt/python@3.12/bin/python3.12
  tasks:

    - name: Create Target Group for RKE2
      community.aws.elb_target_group:
       name: rke2-tg
       target_type: instance
       vpc_id: "{{ primary_ec2.instances[0].vpc_id }}"
       protocol: TCP
       port: 9345
       health_check_protocol: TCP
       health_check_port: 9345
       state: present
      register: rke2_tg

    - name: Create Target Group for Rancher
      community.aws.elb_target_group:
       name: rancher-tg
       target_type: instance
       vpc_id: "{{ primary_ec2.instances[0].vpc_id }}"
       protocol: TCP
       port: 443
       health_check_protocol: TCP
       health_check_port: 80
       state: present
      register: rancher_tg

    - name: Register instances to RKE2 Target Group
      community.aws.elb_target:
       target_group_name: "rke2-tg"
       target_id: "{{ primary_ec2.instances.instance_id | map(attribute='public_ip_address') | list }}"
       state: present
    
    - name: Register instances to RKE2 Target Group
      community.aws.elb_target:
       target_group_name: "rke2-tg"
       target_id: "{{ secondary_ec2.instances.instance_id | map(attribute='public_ip_address') | list }}"
       state: present

    - name: Register instances to Rancher Target Group
      community.aws.elb_target:
       target_group_name: "rancher-tg"
       target_id: "{{ primary_ec2.instances.instance_id | map(attribute='public_ip_address') | list }}"
       state: present
    
    - name: Register instances to Rancher Target Group
      community.aws.elb_target:
       target_group_name: "rancher-tg"
       target_id: "{{ secondary_ec2.instances.instance_id | map(attribute='public_ip_address') | list }}"
       state: present

    - name: Create RKE2 NLB
      community.aws.elb_network_lb:
       name: rke2-nlb
       state: present
       security_groups: "test-security-group"
       scheme: internet-facing
       vpc_id: "{{ ec2.instances[0].vpc_id }}"
       listeners:
         - protocol: TCP
           port: 9345
       DefaultActions:
          - Type: forward # Required. Only 'forward' is accepted at this time
            TargetGroupName: rke2-tg # Required
       tags:
         Name: rke2_nlb

    - name: Create Rancher NLB
      community.aws.elb_network_lb:
       name: rancher-nlb
       state: present
       security_groups: "test-security-group"
       scheme: internet-facing
       vpc_id: "{{ ec2.instances[0].vpc_id }}"
       listeners:
         - protocol: TCP
           port: 443
       DefaultActions:
          - Type: forward # Required. Only 'forward' is accepted at this time
            TargetGroupName: rancher-tg # Required
       tags:
         Name: rancher_nlb

    - name: Output NLB DNS Names
      debug:
       msg:
        - "RKE2 NLB DNS Name: {{ rke2_nlb.load_balancer.dns_name }}"
        - "Rancher NLB DNS Name: {{ rancher_nlb.load_balancer.dns_name }}"